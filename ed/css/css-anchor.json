{
  "spec": {
    "title": "CSS Anchor Positioning",
    "url": "https://drafts.csswg.org/css-anchor-1/"
  },
  "properties": [
    {
      "name": "anchor-scroll",
      "value": "none | <dashed-ident>",
      "initial": "none",
      "appliesTo": "absolutely-positioned elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "none",
          "prose": "No effect.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "<dashed-ident>",
          "prose": "The scroll offsets of the target anchor element with the name given by the <dashed-ident> will be compensated for in positioning and fallback.",
          "type": "value",
          "value": "<dashed-ident>"
        },
        {
          "name": "implicit",
          "prose": "The scroll offsets of the implicit anchor element will be compensated for in positioning and fallback.",
          "type": "value",
          "value": "implicit"
        }
      ],
      "styleDeclaration": [
        "anchor-scroll",
        "anchorScroll"
      ]
    },
    {
      "name": "anchor-name",
      "value": "none | <dashed-ident>",
      "initial": "none",
      "appliesTo": "all elements that generate a principal box",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "none",
          "prose": "The property has no effect.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "<dashed-ident>",
          "prose": "If the element generates a principal box, the element is an anchor element, with an anchor name equal to the <dashed-ident>. The anchor name is a tree-scoped name. Otherwise, the property has no effect.",
          "type": "value",
          "value": "<dashed-ident>"
        }
      ],
      "styleDeclaration": [
        "anchor-name",
        "anchorName"
      ]
    },
    {
      "name": "position-fallback",
      "value": "none | <dashed-ident>",
      "initial": "none",
      "appliesTo": "absolutely-positioned elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "none",
          "prose": "The property has no effect; the element does not use a position fallback list.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "<dashed-ident>",
          "prose": "If there is a @position-fallback rule with a name matching the specified ident, then the element uses that position fallback list. Otherwise, this value has no effect.",
          "type": "value",
          "value": "<dashed-ident>"
        }
      ],
      "styleDeclaration": [
        "position-fallback",
        "positionFallback"
      ]
    }
  ],
  "atrules": [
    {
      "name": "@position-fallback",
      "prose": "The @position-fallback rule defines a position fallback list with a given name, specifying one or more sets of positioning properties inside of @try blocks that will be applied to an element, with each successive one serving as fallback if the previous would cause the element to partially or fully overflow its containing block.",
      "descriptors": [],
      "value": "@position-fallback <dashed-ident> { <rule-list> } @try { <declaration-list> }"
    },
    {
      "name": "@try",
      "prose": "The @position-fallback rule defines a position fallback list with a given name, specifying one or more sets of positioning properties inside of @try blocks that will be applied to an element, with each successive one serving as fallback if the previous would cause the element to partially or fully overflow its containing block.",
      "descriptors": []
    }
  ],
  "selectors": [],
  "values": [
    {
      "name": "anchor()",
      "prose": "An absolutely-positioned element can use the anchor() function as a value in its inset properties to refer to the position of one or more anchor elements. The anchor() function resolves to a <length>.",
      "type": "function",
      "value": "anchor( <dashed-ident>? <anchor-side>, <length-percentage>? )",
      "values": [
        {
          "name": "left",
          "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
          "type": "value",
          "value": "left"
        },
        {
          "name": "right",
          "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
          "type": "value",
          "value": "right"
        },
        {
          "name": "top",
          "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
          "type": "value",
          "value": "top"
        },
        {
          "name": "bottom",
          "prose": "The physical <anchor-side> keywords (left, right, top, and bottom) are only useful in inset properties corresponding to their corresponding axis: for example, using top and bottom in left or right (or in inset-inline-start if the inline axis is horizontal, etc) results in an invalid anchor query.",
          "type": "value",
          "value": "bottom"
        },
        {
          "name": "start",
          "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
          "type": "value",
          "value": "start"
        },
        {
          "name": "end",
          "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
          "type": "value",
          "value": "end"
        },
        {
          "name": "self-start",
          "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
          "type": "value",
          "value": "self-start"
        },
        {
          "name": "self-end",
          "prose": "The logical <anchor-side> keywords (start, end, self-start, and self-end) map to one of the physical keywords depending on the property the function is being used in (top or bottom in the top or bottom properties, etc) and the writing mode of either the element (for self-start and self-end) or the writing mode of the element’s containing block (for start and end).",
          "type": "value",
          "value": "self-end"
        },
        {
          "name": "center",
          "prose": "A <percentage> value refers to a position a corresponding percentage between the start and end sides, with 0% being equivalent to start and 100% being equivalent to end. The center keyword is equivalent to 50%.",
          "type": "value",
          "value": "center"
        }
      ]
    },
    {
      "name": "<anchor-side>",
      "type": "type",
      "value": "top | left | right | bottom | start | end | self-start | self-end | <percentage> | center"
    },
    {
      "name": "anchor-size()",
      "prose": "An absolutely-positioned element can use the anchor-size() function in its sizing properties to refer to the size of one or more anchor elements. The anchor-size() function resolves to a <length>.",
      "type": "function",
      "value": "anchor( <dashed-ident>? <anchor-size>, <length-percentage>? )",
      "values": [
        {
          "name": "width",
          "prose": "The physical <anchor-size> keywords (width and height) refer to the width and height, respectively, of the target anchor element. Unlike anchor(), there is no restriction on having to match axises; for example, width: anchor-size(--foo height); is valid.",
          "type": "value",
          "value": "width"
        },
        {
          "name": "height",
          "prose": "The physical <anchor-size> keywords (width and height) refer to the width and height, respectively, of the target anchor element. Unlike anchor(), there is no restriction on having to match axises; for example, width: anchor-size(--foo height); is valid.",
          "type": "value",
          "value": "height"
        },
        {
          "name": "block",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "block"
        },
        {
          "name": "inline",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "inline"
        },
        {
          "name": "self-block",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "self-block"
        },
        {
          "name": "self-inline",
          "prose": "The logical <anchor-size> keywords (block, inline, self-block, and self-inline) map to one of the physical keywords according to either the writing mode of the element (for self-block and self-inline) or the writing mode of the element’s containing block (for block and inline).",
          "type": "value",
          "value": "self-inline"
        }
      ]
    },
    {
      "name": "<anchor-size>",
      "type": "type",
      "value": "width | height | block | inline | self-block | self-inline"
    }
  ]
}
