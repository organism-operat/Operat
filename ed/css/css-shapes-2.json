{
  "spec": {
    "title": "CSS Shapes Module Level 2",
    "url": "https://drafts.csswg.org/css-shapes-2/"
  },
  "properties": [
    {
      "name": "shape-inside",
      "value": "auto | outside-shape | [ <basic-shape> || shape-box ] | <image> | display",
      "initial": "auto",
      "appliesTo": "block-level elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "computed lengths for <basic-shape>, the absolute URL for <url>, otherwise as specified",
      "canonicalOrder": "per grammar",
      "animationType": "as defined for <basic-shape>, otherwise discrete",
      "values": [
        {
          "name": "auto",
          "prose": "The shape is computed based on the content box of the element.",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "outside-shape",
          "prose": "The shape is computed based on the shape defined by the shape-outside and shape-margin properties.",
          "type": "value",
          "value": "outside-shape"
        },
        {
          "name": "<basic-shape>",
          "prose": "The shape is computed based on the values of one of inset(), circle(), ellipse() or polygon().",
          "type": "value",
          "value": "<basic-shape>"
        },
        {
          "name": "<url>",
          "prose": "If the <uri> references an SVG shape element, that element defines the shape. Otherwise, if the <uri> references an image, the shape is extracted and computed based on the alpha channel of the specified image. If the <uri> does not reference an SVG shape element or an image, the effect is as if the value auto had been specified.",
          "type": "value",
          "value": "<url>"
        },
        {
          "name": "display",
          "prose": "The shape is computed based on the shape of the display as described in css-round-display.",
          "type": "value",
          "value": "display"
        }
      ],
      "styleDeclaration": [
        "shape-inside",
        "shapeInside"
      ]
    },
    {
      "name": "shape-padding",
      "value": "<length>",
      "initial": "none",
      "appliesTo": "block-level elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "the absolute length",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value",
      "styleDeclaration": [
        "shape-padding",
        "shapePadding"
      ]
    }
  ],
  "atrules": [],
  "selectors": [],
  "values": [
    {
      "name": "shape()",
      "type": "function",
      "value": "shape( <'fill-rule'>? from <coordinate-pair>, <shape-command>#)",
      "values": [
        {
          "name": "<coordinate-pair>",
          "value": "<length-percentage>{2}",
          "type": "type"
        },
        {
          "name": "<by-to>",
          "value": "by | to",
          "type": "type",
          "values": [
            {
              "name": "by",
              "prose": "<by-to> = by | to",
              "type": "value",
              "value": "by"
            },
            {
              "name": "to",
              "prose": "<by-to> = by | to",
              "type": "value",
              "value": "to"
            }
          ]
        },
        {
          "name": "<move-command>",
          "value": "move <by-to> <coordinate-pair>",
          "type": "type"
        },
        {
          "name": "move",
          "prose": "<move-command> = move <by-to> <coordinate-pair>",
          "type": "value",
          "value": "move"
        },
        {
          "name": "<line-command>",
          "value": "line <by-to> <coordinate-pair>",
          "type": "type"
        },
        {
          "name": "line",
          "prose": "<line-command> = line <by-to> <coordinate-pair>",
          "type": "value",
          "value": "line"
        },
        {
          "name": "<hv-line-command>",
          "value": "[hline | vline] <by-to> <length-percentage>",
          "type": "type"
        },
        {
          "name": "hline",
          "prose": "<hv-line-command> = [hline | vline] <by-to> <length-percentage>",
          "type": "value",
          "value": "hline"
        },
        {
          "name": "vline",
          "prose": "<hv-line-command> = [hline | vline] <by-to> <length-percentage>",
          "type": "value",
          "value": "vline"
        },
        {
          "name": "<curve-command>",
          "value": "curve <by-to> <coordinate-pair> via <coordinate-pair>{1,2}",
          "type": "type"
        },
        {
          "name": "curve",
          "prose": "<curve-command> = curve <by-to> <coordinate-pair> via <coordinate-pair>{1,2}",
          "type": "value",
          "value": "curve"
        },
        {
          "name": "<smooth-command>",
          "value": "smooth <by-to> <coordinate-pair> [via <coordinate-pair>]?",
          "type": "type"
        },
        {
          "name": "smooth",
          "prose": "<smooth-command> = smooth <by-to> <coordinate-pair> [via <coordinate-pair>]?",
          "type": "value",
          "value": "smooth"
        },
        {
          "name": "<arc-command>",
          "value": "arc <by-to> <coordinate-pair> of <length-percentage>{1,2} [ <arc-sweep> || <arc-size> || rotate <angle> ]?",
          "type": "type"
        },
        {
          "name": "arc",
          "prose": "<arc-command> = arc <by-to> <coordinate-pair> of <length-percentage>{1,2} [ <arc-sweep> || <arc-size> || rotate <angle> ]",
          "type": "value",
          "value": "arc",
          "values": [
            {
              "name": "cw",
              "prose": "<arc-sweep> can be cw or ccw, indicating that the arc that is traced around the ellipse clockwise or counter-clockwise from the center, respectively, must be chosen. If omitted, this defaults to ccw.",
              "type": "value",
              "value": "cw"
            },
            {
              "name": "ccw",
              "prose": "<arc-sweep> can be cw or ccw, indicating that the arc that is traced around the ellipse clockwise or counter-clockwise from the center, respectively, must be chosen. If omitted, this defaults to ccw.",
              "type": "value",
              "value": "ccw"
            },
            {
              "name": "large",
              "prose": "<arc-size> can be large or small, indicating that the larger or smaller, respectively, of the two possible arcs must be chosen. If omitted, this defaults to small.",
              "type": "value",
              "value": "large"
            },
            {
              "name": "small",
              "prose": "<arc-size> can be large or small, indicating that the larger or smaller, respectively, of the two possible arcs must be chosen. If omitted, this defaults to small.",
              "type": "value",
              "value": "small"
            }
          ]
        },
        {
          "name": "<arc-sweep>",
          "prose": "<arc-sweep> can be cw or ccw, indicating that the arc that is traced around the ellipse clockwise or counter-clockwise from the center, respectively, must be chosen. If omitted, this defaults to ccw.",
          "type": "type",
          "value": "cw | ccw"
        },
        {
          "name": "<arc-size>",
          "prose": "<arc-size> can be large or small, indicating that the larger or smaller, respectively, of the two possible arcs must be chosen. If omitted, this defaults to small.",
          "type": "type",
          "value": "large | small"
        },
        {
          "name": "close",
          "prose": "Adds a closepath command to the list of path data commands.",
          "type": "value",
          "value": "close"
        }
      ]
    },
    {
      "name": "<shape-command>",
      "prose": "The sequence of <shape-command>s represent further path data commands. Each command’s starting point is the previous command’s ending point.",
      "type": "type",
      "value": "<move-command> | <line-command> | <hv-line-command> | <curve-command> | <smooth-command> | <arc-command> | close"
    }
  ]
}
