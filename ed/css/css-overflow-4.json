{
  "spec": {
    "title": "CSS Overflow Module Level 4",
    "url": "https://drafts.csswg.org/css-overflow-4/"
  },
  "properties": [
    {
      "name": "overflow-clip-margin-top",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-top",
        "overflowClipMarginTop"
      ]
    },
    {
      "name": "overflow-clip-margin-right",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-right",
        "overflowClipMarginRight"
      ]
    },
    {
      "name": "overflow-clip-margin-bottom",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-bottom",
        "overflowClipMarginBottom"
      ]
    },
    {
      "name": "overflow-clip-margin-left",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-left",
        "overflowClipMarginLeft"
      ]
    },
    {
      "name": "overflow-clip-margin-block-start",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-block-start",
        "overflowClipMarginBlockStart"
      ]
    },
    {
      "name": "overflow-clip-margin-inline-start",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-inline-start",
        "overflowClipMarginInlineStart"
      ]
    },
    {
      "name": "overflow-clip-margin-block-end",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-block-end",
        "overflowClipMarginBlockEnd"
      ]
    },
    {
      "name": "overflow-clip-margin-inline-end",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "the computed <length> and a <visual-box> keyword",
      "animationType": "per computed value if the <visual-box> values match; otherwise discrete",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-inline-end",
        "overflowClipMarginInlineEnd"
      ]
    },
    {
      "name": "overflow-clip-margin",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "see individual properties",
      "animationType": "see individual properties",
      "canonicalOrder": "per grammar",
      "values": [
        {
          "name": "<visual-box>",
          "prose": "Specifies the box edge to use as the overflow clip edge origin, i.e. when the specified offset is zero. If omitted, defaults to padding-box on non-replaced elements, or content-box on replaced elements. Application of overflow-clip-margin to replaced elements is still being worked out. [Issue #7144]",
          "type": "value",
          "value": "<visual-box>"
        },
        {
          "name": "<length [0,∞]>",
          "prose": "The specified offset dictates how much the overflow clip edge is expanded from the specified box edge Negative values are invalid. Defaults to zero if omitted.",
          "type": "value",
          "value": "<length [0,∞]>"
        }
      ],
      "styleDeclaration": [
        "overflow-clip-margin",
        "overflowClipMargin"
      ]
    },
    {
      "name": "overflow-clip-margin-inline",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "see individual properties",
      "animationType": "see individual properties",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-inline",
        "overflowClipMarginInline"
      ]
    },
    {
      "name": "overflow-clip-margin-block",
      "value": "<visual-box> || <length [0,∞]>",
      "initial": "0px",
      "appliesTo": "boxes to which overflow applies",
      "inherited": "no",
      "percentages": "see individual properties",
      "computedValue": "see individual properties",
      "animationType": "see individual properties",
      "canonicalOrder": "per grammar",
      "styleDeclaration": [
        "overflow-clip-margin-block",
        "overflowClipMarginBlock"
      ]
    },
    {
      "name": "text-overflow",
      "value": "[ clip | ellipsis | <string> | fade | <fade()> ]{1,2}",
      "initial": "clip",
      "appliesTo": "block containers",
      "inherited": "no",
      "percentages": "refer to the width of the line box",
      "computedValue": "as specified, with lengths made absolute",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "clip",
          "prose": "Clip inline content that overflows its block container element. Characters may be only partially rendered.",
          "type": "value",
          "value": "clip"
        },
        {
          "name": "ellipsis",
          "prose": "Render an ellipsis character (U+2026) to represent clipped inline content. Implementations may substitute a more language, script, or writing-mode appropriate ellipsis character, or three dots \"...\" if the ellipsis character is unavailable.",
          "type": "value",
          "value": "ellipsis"
        },
        {
          "name": "fade()",
          "value": "fade( [ <length> | <percentage> ] )",
          "type": "function"
        },
        {
          "name": "fade",
          "prose": "Same as fade(), but the distance over which the fading effect is applied is determined by the UA. 1em is suggested as a reasonable value.",
          "type": "value",
          "value": "fade"
        }
      ],
      "styleDeclaration": [
        "text-overflow",
        "textOverflow"
      ]
    },
    {
      "name": "continue",
      "value": "auto | overflow | paginate | fragments | discard",
      "initial": "auto",
      "appliesTo": "block containers [CSS2], flex containers [CSS3-FLEXBOX], and grid containers [CSS3-GRID-LAYOUT]",
      "inherited": "no",
      "percentages": "N/A",
      "computedValue": "see below",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "auto",
          "prose": "auto may only occur as a computed value if the element is a CSS Region other than the last one in a region chain. Content that doesn’t fit is pushed to the next region of the chain. In all other cases, auto computes to one of the other values.",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "overflow",
          "prose": "Content that doesn’t fit overflows, according to the overflow property",
          "type": "value",
          "value": "overflow"
        },
        {
          "name": "discard",
          "prose": "Content that doesn’t fit is discarded at a fragmentation break When the element isn’t a fragmentation container already, should this work by turning it directly into one, or by creating a fragment box inside it like fragments does?",
          "type": "value",
          "value": "discard"
        },
        {
          "name": "paginate",
          "prose": "Content that doesn’t fit paginates. This creates a paginated view inside the element similar to the way that 'overflow: scroll' creates a scrollable view. See paginated overflow",
          "type": "value",
          "value": "paginate"
        },
        {
          "name": "fragments",
          "prose": "content that doesn’t fit causes the element to copy itself and continue laying out. See fragment overflow.",
          "type": "value",
          "value": "fragments"
        }
      ],
      "styleDeclaration": [
        "continue"
      ]
    },
    {
      "name": "max-lines",
      "value": "none | <integer>",
      "initial": "none",
      "appliesTo": "fragment boxes",
      "inherited": "no",
      "percentages": "N/A",
      "computedValue": "the keyword none or an integer",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "none",
          "prose": "Breaks occur only as specified elsewhere.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "<integer>",
          "prose": "In addition to any breaks specified elsewhere, a break is forced before any line that would exceed the given number of lines being placed inside the element (excluding lines that are in a different block formatting context from the block formatting context to which an unstyled child of the element would belong). If there are multiple boundaries between this line and the previous, where exactly (in terms of element boundaries) is the break forced? Only positive integers are accepted. Zero or negative integers are a parse error.",
          "type": "value",
          "value": "<integer>"
        }
      ],
      "styleDeclaration": [
        "max-lines",
        "maxLines"
      ]
    }
  ],
  "atrules": [],
  "selectors": [
    {
      "name": "::nth-fragment()",
      "prose": "The ::nth-fragment() pseudo-element is a pseudo-element that describes some of the fragment boxes generated by an element. The argument to the pseudo-element takes the same syntax as the argument to the :nth-child() pseudo-class defined in [SELECT], and has the same meaning except that the number is relative to fragment boxes generated by the element instead of siblings of the element."
    }
  ],
  "values": []
}
