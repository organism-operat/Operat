{
  "spec": {
    "title": "CSS Inline Layout Module Level 3",
    "url": "https://drafts.csswg.org/css-inline-3/"
  },
  "properties": [
    {
      "name": "dominant-baseline",
      "value": "auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top",
      "initial": "auto",
      "appliesTo": "block containers, inline boxes, table rows, grid containers, flex containers, and SVG text content elements",
      "inherited": "yes",
      "percentages": "N/A",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "auto",
          "prose": "Equivalent to alphabetic in horizontal writing modes and in vertical writing modes when text-orientation is sideways. Equivalent to central in vertical writing modes when text-orientation is mixed or upright. However, in SVG text, the origin point of glyphs (used for coordinate-based glyph positioning) is always handled as for central in vertical writing modes.",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "text-bottom",
          "prose": "Use the text-under baselines.",
          "type": "value",
          "value": "text-bottom"
        },
        {
          "name": "alphabetic",
          "prose": "Use the alphabetic baselines.",
          "type": "value",
          "value": "alphabetic"
        },
        {
          "name": "ideographic",
          "prose": "Use the ideographic-under baselines.",
          "type": "value",
          "value": "ideographic"
        },
        {
          "name": "middle",
          "prose": "Use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline.",
          "type": "value",
          "value": "middle"
        },
        {
          "name": "central",
          "prose": "Use the central baselines.",
          "type": "value",
          "value": "central"
        },
        {
          "name": "mathematical",
          "prose": "Use the math baselines.",
          "type": "value",
          "value": "mathematical"
        },
        {
          "name": "hanging",
          "prose": "Use the hanging baselines.",
          "type": "value",
          "value": "hanging"
        },
        {
          "name": "text-top",
          "prose": "Use the text-over baselines.",
          "type": "value",
          "value": "text-top"
        }
      ],
      "styleDeclaration": [
        "dominant-baseline",
        "dominantBaseline"
      ]
    },
    {
      "name": "vertical-align",
      "value": "[ first | last] || <'alignment-baseline'> || <'baseline-shift'>",
      "initial": "baseline",
      "appliesTo": "see individual properties",
      "inherited": "no",
      "percentages": "N/A",
      "computedValue": "see individual properties",
      "animationType": "see individual properties",
      "canonicalOrder": "per grammar",
      "values": [
        {
          "name": "auto",
          "prose": "Specifies last-baseline alignment for inline-block, first-baseline alignment for everything else.",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "first",
          "prose": "Specifies first-baseline alignment.",
          "type": "value",
          "value": "first"
        },
        {
          "name": "last",
          "prose": "Specifies last-baseline alignment.",
          "type": "value",
          "value": "last"
        },
        {
          "name": "baseline",
          "prose": "Use the dominant baseline choice of the parent.",
          "type": "value",
          "value": "baseline"
        },
        {
          "name": "text-bottom",
          "prose": "Use the text-under baseline.",
          "type": "value",
          "value": "text-bottom"
        },
        {
          "name": "alphabetic",
          "prose": "Use the alphabetic baseline.",
          "type": "value",
          "value": "alphabetic"
        },
        {
          "name": "ideographic",
          "prose": "Use the ideographic-under baseline.",
          "type": "value",
          "value": "ideographic"
        },
        {
          "name": "middle",
          "prose": "In general, use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline instead.",
          "type": "value",
          "value": "middle"
        },
        {
          "name": "central",
          "prose": "Use the central baseline.",
          "type": "value",
          "value": "central"
        },
        {
          "name": "mathematical",
          "prose": "Use the math baseline.",
          "type": "value",
          "value": "mathematical"
        },
        {
          "name": "text-top",
          "prose": "Use the text-over baseline.",
          "type": "value",
          "value": "text-top"
        },
        {
          "name": "<length>",
          "prose": "Raise (positive value) or lower (negative value) by the specified length.",
          "type": "value",
          "value": "<length>"
        },
        {
          "name": "<percentage>",
          "prose": "Raise (positive value) or lower (negative value) by the specified percentage of the line-height.",
          "type": "value",
          "value": "<percentage>"
        },
        {
          "name": "sub",
          "prose": "Lower by the offset appropriate for subscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to dropping by one fifth of the parent’s used font-size.",
          "type": "value",
          "value": "sub"
        },
        {
          "name": "super",
          "prose": "Raise by the offset appropriate for superscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to raising by one third of the parent’s used font-size.",
          "type": "value",
          "value": "super"
        },
        {
          "name": "top",
          "prose": "Align the line-over edge of the aligned subtree with the line-over edge of the line box.",
          "type": "value",
          "value": "top"
        },
        {
          "name": "center",
          "prose": "Align the center of the aligned subtree with the center of the line box.",
          "type": "value",
          "value": "center"
        },
        {
          "name": "bottom",
          "prose": "Align the line-under edge of the aligned subtree with the line-under edge of the line box.",
          "type": "value",
          "value": "bottom"
        }
      ],
      "styleDeclaration": [
        "vertical-align",
        "verticalAlign"
      ]
    },
    {
      "name": "baseline-source",
      "value": "auto | first | last",
      "initial": "auto",
      "appliesTo": "inline-level boxes",
      "inherited": "no",
      "percentages": "N/A",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "auto",
          "prose": "Specifies last-baseline alignment for inline-block, first-baseline alignment for everything else.",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "first",
          "prose": "Specifies first-baseline alignment.",
          "type": "value",
          "value": "first"
        },
        {
          "name": "last",
          "prose": "Specifies last-baseline alignment.",
          "type": "value",
          "value": "last"
        }
      ],
      "styleDeclaration": [
        "baseline-source",
        "baselineSource"
      ]
    },
    {
      "name": "alignment-baseline",
      "value": "baseline | text-bottom | alphabetic | ideographic | middle | central | mathematical | text-top",
      "initial": "baseline",
      "appliesTo": "inline-level boxes, flex items, grid items, table cells, and SVG text content elements",
      "inherited": "no",
      "percentages": "N/A",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "baseline",
          "prose": "Use the dominant baseline choice of the parent.",
          "type": "value",
          "value": "baseline"
        },
        {
          "name": "text-bottom",
          "prose": "Use the text-under baseline.",
          "type": "value",
          "value": "text-bottom"
        },
        {
          "name": "alphabetic",
          "prose": "Use the alphabetic baseline.",
          "type": "value",
          "value": "alphabetic"
        },
        {
          "name": "ideographic",
          "prose": "Use the ideographic-under baseline.",
          "type": "value",
          "value": "ideographic"
        },
        {
          "name": "middle",
          "prose": "In general, use the x-middle baselines; except under text-orientation: upright (where the alphabetic and x-height baselines are essentially meaningless) use the central baseline instead.",
          "type": "value",
          "value": "middle"
        },
        {
          "name": "central",
          "prose": "Use the central baseline.",
          "type": "value",
          "value": "central"
        },
        {
          "name": "mathematical",
          "prose": "Use the math baseline.",
          "type": "value",
          "value": "mathematical"
        },
        {
          "name": "text-top",
          "prose": "Use the text-over baseline.",
          "type": "value",
          "value": "text-top"
        },
        {
          "name": "text-before-edge",
          "type": "value",
          "value": "text-top"
        },
        {
          "name": "text-after-edge",
          "type": "value",
          "value": "text-bottom"
        }
      ],
      "styleDeclaration": [
        "alignment-baseline",
        "alignmentBaseline"
      ]
    },
    {
      "name": "baseline-shift",
      "value": "<length-percentage> | sub | super | top | center | bottom",
      "initial": "0",
      "appliesTo": "inline-level boxes and SVG text content elements",
      "inherited": "no",
      "percentages": "refer to the used value of line-height",
      "computedValue": "the specified keyword or a computed <length-percentage> value",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "<length>",
          "prose": "Raise (positive value) or lower (negative value) by the specified length.",
          "type": "value",
          "value": "<length>"
        },
        {
          "name": "<percentage>",
          "prose": "Raise (positive value) or lower (negative value) by the specified percentage of the line-height.",
          "type": "value",
          "value": "<percentage>"
        },
        {
          "name": "sub",
          "prose": "Lower by the offset appropriate for subscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to dropping by one fifth of the parent’s used font-size.",
          "type": "value",
          "value": "sub"
        },
        {
          "name": "super",
          "prose": "Raise by the offset appropriate for superscripts of the parent’s box. The UA may use the parent’s font metrics to find this offset; otherwise it defaults to raising by one third of the parent’s used font-size.",
          "type": "value",
          "value": "super"
        },
        {
          "name": "top",
          "prose": "Align the line-over edge of the aligned subtree with the line-over edge of the line box.",
          "type": "value",
          "value": "top"
        },
        {
          "name": "center",
          "prose": "Align the center of the aligned subtree with the center of the line box.",
          "type": "value",
          "value": "center"
        },
        {
          "name": "bottom",
          "prose": "Align the line-under edge of the aligned subtree with the line-under edge of the line box.",
          "type": "value",
          "value": "bottom"
        },
        {
          "name": "baseline",
          "prose": "User agents may additionally support the keyword baseline as computing to 0 if is necessary for them to support legacy SVG content. This value is not allowed in the vertical-align shorthand.",
          "type": "value",
          "value": "baseline"
        }
      ],
      "styleDeclaration": [
        "baseline-shift",
        "baselineShift"
      ]
    },
    {
      "name": "line-height",
      "value": "normal | <number> | <length-percentage>",
      "initial": "normal",
      "appliesTo": "non-replaced inline boxes and SVG text content elements",
      "inherited": "yes",
      "percentages": "computed relative to 1em",
      "computedValue": "the specified keyword, a number, or a computed <length> value",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "normal",
          "prose": "Determine the preferred line height automatically based on font metrics.",
          "type": "value",
          "value": "normal"
        },
        {
          "name": "<length>",
          "prose": "The specified length is used as the preferred line height. Negative values are illegal.",
          "type": "value",
          "value": "<length>"
        },
        {
          "name": "<number>",
          "prose": "The preferred line height is this number multiplied by the element’s computed font-size. Negative values are illegal. The computed value is the same as the specified value.",
          "type": "value",
          "value": "<number>"
        },
        {
          "name": "<percentage>",
          "prose": "The preferred line height and computed value of the property is this percentage of the element’s computed font-size. Negative values are illegal.",
          "type": "value",
          "value": "<percentage>"
        }
      ],
      "styleDeclaration": [
        "line-height",
        "lineHeight"
      ]
    },
    {
      "name": "text-edge",
      "value": "leading | [ text | cap | ex | ideographic | ideographic-ink ] [ text | alphabetic | ideographic | ideographic-ink ]?",
      "initial": "leading",
      "appliesTo": "inline boxes",
      "inherited": "yes",
      "percentages": "N/A",
      "computedValue": "the specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "leading",
          "prose": "Use the ascent/descent plus any positive half-leading. Margin/padding/border is ignored for the purpose of sizing the line box.",
          "type": "value",
          "value": "leading"
        },
        {
          "name": "text",
          "prose": "Use the text-over baseline/text-under baseline.",
          "type": "value",
          "value": "text"
        },
        {
          "name": "cap",
          "prose": "Use the cap-height baseline.",
          "type": "value",
          "value": "cap"
        },
        {
          "name": "ex",
          "prose": "Use the x-height baseline.",
          "type": "value",
          "value": "ex"
        },
        {
          "name": "ideographic",
          "prose": "Use the ideographic-over baseline/ideographic-under baseline.",
          "type": "value",
          "value": "ideographic"
        },
        {
          "name": "ideographic-ink",
          "prose": "Use the ideographic-ink-over baseline/ideographic-ink-under baseline.",
          "type": "value",
          "value": "ideographic-ink"
        },
        {
          "name": "alphabetic",
          "prose": "Use the alphabetic baseline.",
          "type": "value",
          "value": "alphabetic"
        }
      ],
      "styleDeclaration": [
        "text-edge",
        "textEdge"
      ]
    },
    {
      "name": "leading-trim",
      "value": "normal | start | end | both",
      "initial": "normal",
      "appliesTo": "block containers and inline boxes",
      "inherited": "no",
      "percentages": "N/A",
      "computedValue": "the specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "normal",
          "prose": "No special handling of the first/last line box when applied to a block container. When applied to an inline box, specifies that the over/under content edges coincide with the text-over/text-under baselines regardless of text-edge (which nonetheless still affects line box sizing).",
          "type": "value",
          "value": "normal"
        },
        {
          "name": "start",
          "prose": "For block containers: trim the block-start side of the first formatted line to the corresponding text-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-end side of the box to match its content edge to the metric specified by text-edge (treating leading as text).",
          "type": "value",
          "value": "start"
        },
        {
          "name": "end",
          "prose": "For block containers: trim the block-end side of the last formatted line to the corresponding text-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-end side of the box to match its content edge to the metric specified by text-edge (treating leading as text).",
          "type": "value",
          "value": "end"
        },
        {
          "name": "both",
          "prose": "Specifies the behavior of start and end simultaneously.",
          "type": "value",
          "value": "both"
        }
      ],
      "styleDeclaration": [
        "leading-trim",
        "leadingTrim"
      ]
    },
    {
      "name": "inline-sizing",
      "value": "normal | stretch",
      "initial": "normal",
      "appliesTo": "inline boxes, but not ruby container boxes nor internal ruby boxes",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "normal",
          "prose": "The content area of the inline box is sized and positioned to fit (possibly hypothetical) text from its first available font. This specification does not specify how. A UA may, e.g., use the maximum ascender and descender of the font. (This would ensure that glyphs with parts above or below the em-box still fall within the content area, but leads to differently sized boxes for different fonts.)",
          "type": "value",
          "value": "normal"
        },
        {
          "name": "stretch",
          "prose": "Once the line box has been sized and its contents positioned as for normal, the inline box’s box edges are shifted such that its over/under margin edges coincide with the corresponding line box’s edges, stretching the inline box’s inner logical height so that its block-axis outer size fills the line box. (The sizes and positions of its in-flow contents are not affected.)",
          "type": "value",
          "value": "stretch"
        }
      ],
      "styleDeclaration": [
        "inline-sizing",
        "inlineSizing"
      ]
    },
    {
      "name": "initial-letter",
      "value": "normal | <number [1,∞]> <integer [1,∞]> | <number [1,∞]> && [ drop | raise ]?",
      "initial": "normal",
      "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
      "inherited": "no",
      "percentages": "N/A",
      "computedValue": "the keyword normal or a number paired with an integer",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "normal",
          "prose": "No special initial letter effect. Text behaves as normal.",
          "type": "value",
          "value": "normal"
        },
        {
          "name": "<number [1,∞]>",
          "prose": "This first argument defines the size of the initial letter in terms of how many lines it occupies. Values less than one are invalid.",
          "type": "value",
          "value": "<number [1,∞]>"
        },
        {
          "name": "<integer [1,∞]>",
          "prose": "This optional second argument defines the number of lines the initial letter should sink. A value of 1 indicates a raised initial; values greater than 1 indicate a sunken initial. Values less than one are invalid.",
          "type": "value",
          "value": "<integer [1,∞]>"
        },
        {
          "name": "raise",
          "prose": "Computes to an initial letter sink of 1.",
          "type": "value",
          "value": "raise"
        },
        {
          "name": "drop",
          "prose": "Computes to an initial letter sink equal to the initial letter size floored to the nearest positive whole number.",
          "type": "value",
          "value": "drop"
        }
      ],
      "styleDeclaration": [
        "initial-letter",
        "initialLetter"
      ]
    },
    {
      "name": "initial-letter-align",
      "value": "[ border-box? [ alphabetic | ideographic | hanging | leading ]? ]!",
      "initial": "alphabetic",
      "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
      "inherited": "yes",
      "percentages": "N/A",
      "computedValue": "specified keyword(s)",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "alphabetic",
          "prose": "Use the cap-height and alphabetic baselines of the surrounding text to align the initial letter.",
          "type": "value",
          "value": "alphabetic"
        },
        {
          "name": "ideographic",
          "prose": "Use the ideographic-ink-over and ideographic-ink-under baselines of the surrounding text to align the initial letter.",
          "type": "value",
          "value": "ideographic"
        },
        {
          "name": "hanging",
          "prose": "Use the hanging and alphabetic baselines of the surrounding text to align the initial letter.",
          "type": "value",
          "value": "hanging"
        },
        {
          "name": "leading",
          "prose": "Use the over/under half-leading edges (i.e. ascent/descent + half-leading) of the surrounding text to align the initial letter.",
          "type": "value",
          "value": "leading"
        },
        {
          "name": "border-box",
          "prose": "Use the initial letter box’s line-under and line-over border edges as the over and under alignment points, respectively.",
          "type": "value",
          "value": "border-box"
        }
      ],
      "styleDeclaration": [
        "initial-letter-align",
        "initialLetterAlign"
      ]
    },
    {
      "name": "initial-letter-wrap",
      "value": "none | first | all | grid | <length-percentage>",
      "initial": "none",
      "appliesTo": "certain inline-level boxes and ::first-letter and inside ::marker boxes (see prose)",
      "inherited": "yes",
      "percentages": "relative to logical width of (last fragment of) initial letter",
      "computedValue": "specified keyword or computed <length-percentage> value",
      "canonicalOrder": "per grammar",
      "animationType": "by computed value type",
      "values": [
        {
          "name": "none",
          "prose": "No contour-fitting is performed: each impacted line is aligned flush to the inline-end margin edge of the initial letter.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "first",
          "prose": "Behaves as none if the first typographic character unit after the initial letter belongs to Unicode General Category Zs. Otherwise behaves as for all on the first line of the block containing the initial letter and as none on the rest. This example shows why contour-fitting the first line is necessary, and why it is dropped when the initial letter is followed by a space: In the top paragraph, the initial letter \"A\" has a word space after it: the gap between the top of the \"A\" and the next letter provides the necessary word separation. In the next paragraph, the initial letter \"A\" is part of the first word, and leaving a gap between the top of the \"A\" and the next letter would create a jarring visual break within the word. In this case, the first line of text should be kerned into the initial letter’s area, as shown in the bottom paragraph. Do we need an unconditional first? (I.e. Should we rename this value to auto and add a first value that does not check for spaces?) See GitHub issue 410",
          "type": "value",
          "value": "first"
        },
        {
          "name": "all",
          "prose": "For each line of text impacted by the initial letter, the line box adjacent to the initial letter starts at the start-most point that does not overlap the initial letter’s glyph outline. If the value of shape-outside is not none, shape-outside is used instead of the glyph outline. In both cases, shape-margin is applied to expand the outline, and the resulting outline is clipped by the initial letter’s margin edges.",
          "type": "value",
          "value": "all"
        },
        {
          "name": "grid",
          "prose": "This value is the same as none, except that the exclusion area of the impacted lines is increased as necessary for its end-edge to land on the character grid, i.e. to be a multiple of (1ic + letter-spacing) as computed on the containing block. The justify-self property can then be used to align the initial letter box within the exclusion area. Diagram of Japanese initial letter in vertical writing mode",
          "type": "value",
          "value": "grid"
        },
        {
          "name": "<length>",
          "prose": "This value behaves the same as first except that the adjustment to the first line is given explicitly instead of being inferred from the glyph shape. This really needs font-relative lengths to be relative to the used size. In the following example, UAs that support first will use the glyph outline plus the specified margin in order to place the first line, whereas UAs that only support <length> or <percentage> values will pull in the first line by 40% of the initial letter’s width (and then add the margin to that point). h1 + p:first-letter { initial-letter: 3; /* 3-line drop-cap */ initial-letter-wrap: first; margin-right: 0.1em; } @supports (not (initial-letter-wrap: first)) { /* Classes auto-generated on paragraphs to match first letter. */ p.A:first-letter { initial-letter-wrap: -40%; /* Start of glyph outline, assuming correct font. */ } } These values and related annoyance is likely unnecessary if someone submits a patch to Blink to support first.",
          "type": "value",
          "value": "<length>"
        },
        {
          "name": "<percentage>",
          "prose": "This value behaves the same as first except that the adjustment to the first line is given explicitly instead of being inferred from the glyph shape. This really needs font-relative lengths to be relative to the used size. In the following example, UAs that support first will use the glyph outline plus the specified margin in order to place the first line, whereas UAs that only support <length> or <percentage> values will pull in the first line by 40% of the initial letter’s width (and then add the margin to that point). h1 + p:first-letter { initial-letter: 3; /* 3-line drop-cap */ initial-letter-wrap: first; margin-right: 0.1em; } @supports (not (initial-letter-wrap: first)) { /* Classes auto-generated on paragraphs to match first letter. */ p.A:first-letter { initial-letter-wrap: -40%; /* Start of glyph outline, assuming correct font. */ } } These values and related annoyance is likely unnecessary if someone submits a patch to Blink to support first.",
          "type": "value",
          "value": "<percentage>"
        }
      ],
      "styleDeclaration": [
        "initial-letter-wrap",
        "initialLetterWrap"
      ]
    }
  ],
  "atrules": [],
  "selectors": [],
  "values": []
}
