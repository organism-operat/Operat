{
  "spec": {
    "title": "CSS Images Module Level 3",
    "url": "https://www.w3.org/TR/css-images-3/"
  },
  "properties": [
    {
      "name": "object-fit",
      "value": "fill | contain | cover | none | scale-down",
      "initial": "fill",
      "appliesTo": "replaced elements",
      "inherited": "no",
      "percentages": "n/a",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "fill",
          "prose": "The replaced content is sized to fill the element’s content box: the object’s concrete object size is the element’s used width and height.",
          "type": "value",
          "value": "fill"
        },
        {
          "name": "contain",
          "prose": "The replaced content is sized to maintain its natural aspect ratio while fitting within the element’s content box: its concrete object size is resolved as a contain constraint against the element’s used width and height.",
          "type": "value",
          "value": "contain"
        },
        {
          "name": "cover",
          "prose": "The replaced content is sized to maintain its natural aspect ratio while filling the element’s entire content box: its concrete object size is resolved as a cover constraint against the element’s used width and height.",
          "type": "value",
          "value": "cover"
        },
        {
          "name": "none",
          "prose": "The replaced content is not resized to fit inside the element’s content box: determine the object’s concrete object size using the default sizing algorithm with no specified size, and a default object size equal to the replaced element’s used width and height.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "scale-down",
          "prose": "Size the content as if none or contain were specified, whichever would result in a smaller concrete object size.",
          "type": "value",
          "value": "scale-down"
        }
      ],
      "styleDeclaration": [
        "object-fit",
        "objectFit"
      ]
    },
    {
      "name": "object-position",
      "value": "<position>",
      "initial": "50% 50%",
      "appliesTo": "replaced elements",
      "inherited": "no",
      "percentages": "refer to width and height of element itself",
      "computedValue": "as for background-position",
      "canonicalOrder": "the horizontal component of the <position>, followed by the vertical component",
      "animationType": "as for background-position",
      "styleDeclaration": [
        "object-position",
        "objectPosition"
      ]
    },
    {
      "name": "image-orientation",
      "value": "from-image | none | [ <angle> || flip ]",
      "initial": "from-image",
      "appliesTo": "all elements",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "the specified keyword, or an <angle>, rounded and normalized (see text), plus optionally a flip keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "none",
          "prose": "No additional rotation is applied: the image is oriented as encoded.",
          "type": "value",
          "value": "none"
        },
        {
          "name": "from-image",
          "prose": "If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image. If necessary, this angle is then rounded and normalized as described above for an <angle> value. If there is no orientation specified in its metadata, this value computes to none.",
          "type": "value",
          "value": "from-image"
        },
        {
          "name": "<angle>",
          "prose": "Positive <angle> values cause the image to be rotated to the right (in a clockwise direction), while negative values cause a rotation to the left. If the <angle> is omitted, it defaults to 0deg. If flip is specified, after rotation the image is flipped horizontally. This value only applies to content images; decorative images continue to behave as from-image. This value is deprecated and is optional for implementations except those conforming to [CSS-PRINT]. The computed value of the property is calculated by rounding the <angle> to the nearest quarter turn, rounding towards positive infinity when that’s ambiguous, then moduloing the value by 1turn (so that it lies in the half-open range [0turn, 1turn)).",
          "type": "value",
          "value": "<angle>"
        }
      ],
      "styleDeclaration": [
        "image-orientation",
        "imageOrientation"
      ]
    },
    {
      "name": "image-rendering",
      "value": "auto | smooth | high-quality | crisp-edges | pixelated",
      "initial": "auto",
      "appliesTo": "all elements",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "specified keyword",
      "canonicalOrder": "per grammar",
      "animationType": "discrete",
      "values": [
        {
          "name": "auto",
          "prose": "The scaling algorithm is UA dependent.",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "smooth",
          "prose": "The image should be scaled with an algorithm that maximizes the appearance of the image. In particular, scaling algorithms that \"smooth\" colors are acceptable, such as bilinear interpolation. This is intended for images such as photos.",
          "type": "value",
          "value": "smooth"
        },
        {
          "name": "high-quality",
          "prose": "Identical to smooth, but with a preference for higher-quality scaling. If system resources are constrained, images with high-quality should be prioritized over those with any other value, when considering which images to degrade the quality of and to what degree.",
          "type": "value",
          "value": "high-quality"
        },
        {
          "name": "crisp-edges",
          "prose": "The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process. This is intended for images such as pixel art or line drawings.",
          "type": "value",
          "value": "crisp-edges"
        },
        {
          "name": "pixelated",
          "prose": "The image must be scaled with the \"nearest neighbor\" or similar algorithm, to preserve a \"pixelated\" look as the image changes in size.",
          "type": "value",
          "value": "pixelated"
        }
      ],
      "styleDeclaration": [
        "image-rendering",
        "imageRendering"
      ]
    }
  ],
  "atrules": [],
  "selectors": [],
  "values": [
    {
      "name": "<image>",
      "type": "type",
      "value": "<url> | <gradient>"
    },
    {
      "name": "<gradient>",
      "type": "type",
      "value": "<linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()>"
    },
    {
      "name": "linear-gradient()",
      "type": "function",
      "value": "linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )"
    },
    {
      "name": "<side-or-corner>",
      "type": "type",
      "value": "[left | right] || [top | bottom]"
    },
    {
      "name": "radial-gradient()",
      "type": "function",
      "value": "radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )",
      "values": [
        {
          "name": "<position>",
          "prose": "Determines the center of the gradient. The <position> value type (which is also used for background-position) is defined in [CSS-VALUES-3], and is resolved using the center-point as the object area and the gradient box as the positioning area. If this argument is omitted, it defaults to center.",
          "type": "value",
          "value": "<position>"
        },
        {
          "name": "<ending-shape>",
          "prose": "Can be either circle or ellipse; determines whether the gradient’s ending shape is a circle or an ellipse, respectively. If <ending-shape> is omitted, the ending shape defaults to a circle if the <size> is a single <length>, and to an ellipse otherwise.",
          "type": "value",
          "value": "<ending-shape>",
          "values": [
            {
              "name": "circle",
              "type": "value",
              "value": "circle"
            },
            {
              "name": "ellipse",
              "type": "value",
              "value": "ellipse"
            }
          ]
        },
        {
          "name": "<size>",
          "prose": "Determines the size of the gradient’s ending shape. If omitted it defaults to farthest-corner. It can be given explicitly or by keyword. For the purpose of the keyword definitions, consider the gradient box edges as extending infinitely in both directions, rather than being finite line segments. If the ending-shape is an ellipse, its axises are aligned with the horizontal and vertical axises. Both circle and ellipse gradients accept the following keywords as their <size>: If <ending-shape> is specified as circle or is omitted, the <size> may be given explicitly as: If <ending-shape> is specified as ellipse or is omitted, <size> may instead be given explicitly as:",
          "type": "value",
          "value": "<size>"
        }
      ]
    },
    {
      "name": "<size>",
      "prose": "Both circle and ellipse gradients accept the following keywords as their <size>:",
      "type": "type",
      "values": [
        {
          "name": "closest-side",
          "prose": "The ending shape is sized so that it exactly meets the side of the gradient box closest to the gradient’s center. If the shape is an ellipse, it exactly meets the closest side in each dimension.",
          "type": "value",
          "value": "closest-side"
        },
        {
          "name": "farthest-side",
          "prose": "Same as closest-side, except the ending shape is sized based on the farthest side(s).",
          "type": "value",
          "value": "farthest-side"
        },
        {
          "name": "closest-corner",
          "prose": "The ending shape is sized so that it passes through the corner of the gradient box closest to the gradient’s center. If the shape is an ellipse, the ending shape is given the same aspect-ratio it would have if closest-side were specified.",
          "type": "value",
          "value": "closest-corner"
        },
        {
          "name": "farthest-corner",
          "prose": "Same as closest-corner, except the ending shape is sized based on the farthest corner. If the shape is an ellipse, the ending shape is given the same aspect ratio it would have if farthest-side were specified.",
          "type": "value",
          "value": "farthest-corner"
        },
        {
          "name": "<length>",
          "prose": "Gives the radius of the circle explicitly. Negative values are invalid.",
          "type": "value",
          "value": "<length>"
        },
        {
          "name": "<length-percentage>{2}",
          "prose": "Gives the size of the ellipse explicitly. The first value represents the horizontal radius, the second the vertical radius. Percentages values are relative to the corresponding dimension of the gradient box. Negative values are invalid.",
          "type": "value",
          "value": "<length-percentage>{2}"
        }
      ]
    },
    {
      "name": "repeating-linear-gradient()",
      "prose": "In addition to linear-gradient() and radial-gradient(), this specification defines repeating-linear-gradient() and repeating-radial-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously.",
      "type": "function"
    },
    {
      "name": "repeating-radial-gradient()",
      "prose": "In addition to linear-gradient() and radial-gradient(), this specification defines repeating-linear-gradient() and repeating-radial-gradient() values. These notations take the same values and are interpreted the same as their respective non-repeating siblings defined previously.",
      "type": "function",
      "values": [
        {
          "name": "<position>",
          "prose": "Determines the center of the gradient. The <position> value type (which is also used for background-position) is defined in [CSS-VALUES-3], and is resolved using the center-point as the object area and the gradient box as the positioning area. If this argument is omitted, it defaults to center.",
          "type": "value",
          "value": "<position>"
        },
        {
          "name": "<ending-shape>",
          "prose": "Can be either circle or ellipse; determines whether the gradient’s ending shape is a circle or an ellipse, respectively. If <ending-shape> is omitted, the ending shape defaults to a circle if the <size> is a single <length>, and to an ellipse otherwise.",
          "type": "value",
          "value": "<ending-shape>",
          "values": [
            {
              "name": "circle",
              "type": "value",
              "value": "circle"
            },
            {
              "name": "ellipse",
              "type": "value",
              "value": "ellipse"
            }
          ]
        },
        {
          "name": "<size>",
          "prose": "Determines the size of the gradient’s ending shape. If omitted it defaults to farthest-corner. It can be given explicitly or by keyword. For the purpose of the keyword definitions, consider the gradient box edges as extending infinitely in both directions, rather than being finite line segments. If the ending-shape is an ellipse, its axises are aligned with the horizontal and vertical axises. Both circle and ellipse gradients accept the following keywords as their <size>: If <ending-shape> is specified as circle or is omitted, the <size> may be given explicitly as: If <ending-shape> is specified as ellipse or is omitted, <size> may instead be given explicitly as:",
          "type": "value",
          "value": "<size>"
        }
      ]
    },
    {
      "name": "<color-stop-list>",
      "type": "type",
      "value": "<linear-color-stop> , [ <linear-color-hint>? , <linear-color-stop> ]#"
    },
    {
      "name": "<linear-color-stop>",
      "type": "type",
      "value": "<color> && <length-percentage>?"
    },
    {
      "name": "<linear-color-hint>",
      "type": "type",
      "value": "<length-percentage>"
    }
  ]
}
